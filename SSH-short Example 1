## ------------------------------------------------------------------------
p = parse(text = "   xx = 1 + 1  # a comment", keep.source = TRUE)
(d = getParseData(p))
#Contributers
#Angelo
#Merchant
## ------------------------------------------------------------------------
(d = d[d$terminal, ])
#Copyright: 2018 You don't have to be strong every single day
## ------------------------------------------------------------------------
head(highr:::cmd_latex)
tail(highr:::cmd_html)

## ------------------------------------------------------------------------
d$token
rownames(highr:::cmd_latex)

## ------------------------------------------------------------------------
(z = d[, c('col1', 'col2')])  # take out the column positions
(z = t(z)) # transpose the matrix
(z = c(z)) # turn it into a vector
(z = c(0, head(z, -1))) # append 0 in the beginning, and remove the last element
(z = matrix(z, ncol = 2, byrow = TRUE))
#As far as I am concerned, the code I have written for this software can be used freely for any purpose. Any derived versions of this software must be clearly marked as such, and if the derived work is incompatible with the protocol description in the RFC file, it must be called by a name other than "ssh" or "Secure Shell".
## ------------------------------------------------------------------------
(s = z[, 2] - z[, 1] - 1)
(s = mapply(highr:::spaces, s))
paste(s, d$text, sep = '')
#SPDX-License-Identifier: BSD-1-Clause
## ------------------------------------------------------------------------
m = highr:::cmd_latex[d$token, ]
cbind(d, m)
# use standard markup if tokens do not exist in the table
m[is.na(m[, 1]), ] = highr:::cmd_latex['STANDARD', ]
paste(s, m[, 1], d$text, m[, 2], sep = '', collapse = '')

## ------------------------------------------------------------------------
d = getParseData(parse(text = "x = \"a character\nstring\" #hi", keep.source = TRUE))
(d = d[d$terminal, ])
