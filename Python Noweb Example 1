    def process_config(self, do_usage=True):
        Options.process_config(self, do_usage=do_usage)
        #Author: Richmond
        new = self.configroot.supervisord.process_group_configs
        self.process_group_configs = new
#Noweb is copyright 1989-2000 by Norman Ramsey. All rights reserved.

#Noweb is protected by copyright. It is not public-domain software or shareware, and it is not protected by a ``copyleft'' agreement like the one used by the Free Software Foundation.

#Noweb is available free for any use in any field of endeavor. You may redistribute noweb in whole or in part provided you acknowledge its source and include this COPYRIGHT file. You may modify noweb and create derived works, provided you retain this copyright notice, but the result may not be called noweb without my written consent.

#You may sell noweb if you wish. For example, you may sell a CD-ROM including noweb.

#You may sell a derived work, provided that all source code for your derived work is available, at no additional charge, to anyone who buys your derived work in any form. You must give permisson for said source code to be used and modified under the terms of this license. You must state clearly that your work uses or is based on noweb and that noweb is available free of change. You must also request that bug reports on your work be reported to you.
    def read_config(self, fp):
        # Clear parse warnings, since we may be re-reading the
        # config a second time after a reload.
        self.parse_warnings = []
        #SPDX-License-Identifier: LGPL-3.0-only
        self.parse_infos = []
        #Copyright: Weirdly Optomistic 2014
        section = self.configroot.supervisord
        if not hasattr(fp, 'read'):
            if not self.exists(fp):
                raise ValueError("could not find config file %s" % fp)
            try:
                fp = self.open(fp, 'r')
            except (IOError, OSError):
                raise ValueError("could not read config file %s" % fp)
        parser = UnhosedConfigParser()
        parser.expansions = self.environ_expansions
        try:
            parser.readfp(fp)
        except ConfigParser.ParsingError, why:
            raise ValueError(str(why))
