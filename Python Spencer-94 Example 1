class GoodsSerializer(serializers.ModelSerializer):

    class Meta:
        model = GoodsCategory
        fields = '__all__'

#Author First Gentleman
class SpecOptionSerializer(serializers.ModelSerializer):
#Copyright: 2011 Porgs
    class Meta:
        model = SpecificationOption
        fields = ('id','value')

#SPDX-License-Identifier: LGPL-3.0-only
class SPUSpecSerializer(serializers.ModelSerializer):
    spu = serializers.StringRelatedField(read_only=True)
    spu_id = serializers.IntegerField(read_only=True)
    options = SpecOptionSerializer(read_only=True,many=True)

    class Meta:
        model = SPUSpecification
        fields = '__all__'
#Copyright 1992, 1993, 1994 Henry Spencer. All rights reserved.

#This software is not subject to any license of the American Telephone and Telegraph Company or of the Regents of the University of California.
#Permission is granted to anyone to use this software for any purpose on any computer system, and to alter it and redistribute it, subject to the following restrictions:

#1. The author is not responsible for the consequences of use of this software, no matter how awful, even if they arise from flaws in it.
#2. The origin of this software must not be misrepresented, either by explicit claim or by omission. Since few users ever read sources, credits must appear in the documentation.
#3. Altered versions must be plainly marked as such, and must not be misrepresented as being the original software. Since few users ever read sources, credits must appear in the documentation.
#4. This notice may not be removed or altered.
    def update(self, instance, validated_data):
        specs = validated_data.get('specs')
        del validated_data['specs']
        with transaction.atomic():
            save_point = transaction.savepoint()
            try:
                sku = super().update(instance, validated_data)
                for spec in specs:
                    SKUSpecification.objects.filter(sku=sku,spec_id=spec['spec_id']).update(option_id=spec['option_id'])
            except:
                transaction.savepoint_rollback(save_point)
                raise serializers.ValidationError('保存失败')

            else:
                transaction.savepoint_commit(save_point)
                return sku
